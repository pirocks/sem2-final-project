import java.math.BigInteger;

class BigInteger3N1
{
	public static void main(String [] args)
	{
		realMain();
	}
	public static void realMain()
	{
		BigInteger n = getPosInt();//gets BigInteger
		BigInteger currentN = new BigInteger("2");
		BigInteger max = howManyTimes(new BigInteger("1"));
		BigInteger maxCurrentN = new BigInteger("1");
		while(currentN.compareTo(n) == -1)
		{
				if(max.compareTo(howManyTimes(currentN))  == -1)
				{
						max = howManyTimes(currentN);
						maxCurrentN = currentN;
				}
				currentN = currentN.add(new BigInteger("1"));
		}
		System.out.println("Maximum number of times: " + max);
		System.out.println("Generated by: " + maxCurrentN);
		realMain();//asks again. If the user wants to exit they should hit control+c
	}
	public static BigInteger howManyTimes(BigInteger n)
	{
			int count = 1;
			BigInteger current = n;
			while(!(current.equals(new BigInteger("1"))))
			{
				count++;
				if(current.mod(new BigInteger("2")).equals(new BigInteger("0")))
					current = current.divide(new BigInteger("2"));
				else
					current = (new BigInteger("3")).multiply(current).add(new BigInteger("1"));
			}
			return new BigInteger(count + "");
	}
	public static BigInteger getPosInt()
	{
			System.out.println("Control + c to cancel->");
			BigInteger n;
			try
			{
				n = new BigInteger(TextIO.getln());
			}
			catch(NumberFormatException e)
			{
				System.out.print("Control + c to cancel. Choose a positive integer:");
				return getPosInt();
			}
			if(-1 == n.compareTo(new BigInteger("1")))
			{
				System.out.print("Control + c to cancel. Choose a positive integer:");
				return getPosInt();
			}
			return n;
	}
}
